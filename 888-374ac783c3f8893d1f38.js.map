{"version":3,"file":"888-374ac783c3f8893d1f38.js","mappings":"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","sources":["webpack://blog/./node_modules/@codesandbox/sandpack-client/dist/index-585bceb7.mjs"],"sourcesContent":["import { g as __extends, _ as __awaiter, a as __generator } from './utils-52664384.mjs';\nimport { PreviewController } from 'static-browser-server';\nimport { E as EventEmitter, c as consoleHook, g as generateRandomId, f as fromBundlerFilesToFS } from './consoleHook-59e792cb.mjs';\nimport { S as SandpackClient } from './base-80a1f760.mjs';\nimport 'outvariant';\nimport 'dequal';\n\nvar insertHtmlAfterRegex = function (regex, content, insertable) {\n    var match = regex.exec(content);\n    if (match && match.length >= 1) {\n        var offset = match.index + match[0].length;\n        var prefix = content.substring(0, offset);\n        var suffix = content.substring(offset);\n        return prefix + insertable + suffix;\n    }\n};\nvar readBuffer = function (content) {\n    if (typeof content === \"string\") {\n        return content;\n    }\n    else {\n        return new TextDecoder().decode(content);\n    }\n};\nvar validateHtml = function (content) {\n    // Make it a string\n    var contentString = readBuffer(content);\n    var domParser = new DOMParser();\n    var doc = domParser.parseFromString(contentString, \"text/html\");\n    if (!doc.documentElement.getAttribute(\"lang\")) {\n        doc.documentElement.setAttribute(\"lang\", \"en\");\n    }\n    var html = doc.documentElement.outerHTML;\n    return \"<!DOCTYPE html>\\n\".concat(html);\n};\n\nvar SandpackStatic = /** @class */ (function (_super) {\n    __extends(SandpackStatic, _super);\n    function SandpackStatic(selector, sandboxSetup, options) {\n        if (options === void 0) { options = {}; }\n        var _a;\n        var _this = _super.call(this, selector, sandboxSetup, options) || this;\n        _this.files = new Map();\n        _this.status = \"initializing\";\n        _this.emitter = new EventEmitter();\n        _this.previewController = new PreviewController({\n            baseUrl: (_a = options.bundlerURL) !== null && _a !== void 0 ? _a : \"https://preview.sandpack-static-server.codesandbox.io\",\n            // filepath is always normalized to start with / and not end with a slash\n            getFileContent: function (filepath) {\n                var content = _this.files.get(filepath);\n                if (!content) {\n                    throw new Error(\"File not found\");\n                }\n                if (filepath.endsWith(\".html\") || filepath.endsWith(\".htm\")) {\n                    try {\n                        content = validateHtml(content);\n                        content = _this.injectProtocolScript(content);\n                        content = _this.injectExternalResources(content, options.externalResources);\n                        content = _this.injectScriptIntoHead(content, {\n                            script: consoleHook,\n                            scope: { channelId: generateRandomId() },\n                        });\n                    }\n                    catch (err) {\n                        console.error(\"Runtime injection failed\", err);\n                    }\n                }\n                return content;\n            },\n        });\n        if (typeof selector === \"string\") {\n            _this.selector = selector;\n            var element = document.querySelector(selector);\n            _this.element = element;\n            _this.iframe = document.createElement(\"iframe\");\n        }\n        else {\n            _this.element = selector;\n            _this.iframe = selector;\n        }\n        if (!_this.iframe.getAttribute(\"sandbox\")) {\n            _this.iframe.setAttribute(\"sandbox\", \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads allow-pointer-lock\");\n            _this.iframe.setAttribute(\"allow\", \"accelerometer; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; clipboard-write;\");\n        }\n        _this.eventListener = _this.eventListener.bind(_this);\n        if (typeof window !== \"undefined\") {\n            window.addEventListener(\"message\", _this.eventListener);\n        }\n        // Dispatch very first compile action\n        _this.updateSandbox();\n        return _this;\n    }\n    SandpackStatic.prototype.injectContentIntoHead = function (content, contentToInsert) {\n        var _a;\n        // Make it a string\n        content = readBuffer(content);\n        // Inject script\n        content =\n            (_a = insertHtmlAfterRegex(/<head[^<>]*>/g, content, \"\\n\" + contentToInsert)) !== null && _a !== void 0 ? _a : contentToInsert + \"\\n\" + content;\n        return content;\n    };\n    SandpackStatic.prototype.injectProtocolScript = function (content) {\n        var scriptToInsert = \"<script>\\n  window.addEventListener(\\\"message\\\", (message) => {\\n    if(message.data.type === \\\"refresh\\\") {\\n      window.location.reload();\\n    }\\n  })\\n</script>\";\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.injectExternalResources = function (content, externalResources) {\n        if (externalResources === void 0) { externalResources = []; }\n        var tagsToInsert = externalResources\n            .map(function (resource) {\n            var match = resource.match(/\\.([^.]*)$/);\n            var fileType = match === null || match === void 0 ? void 0 : match[1];\n            if (fileType === \"css\" || resource.includes(\"fonts.googleapis\")) {\n                return \"<link rel=\\\"stylesheet\\\" href=\\\"\".concat(resource, \"\\\">\");\n            }\n            if (fileType === \"js\") {\n                return \"<script src=\\\"\".concat(resource, \"\\\"></script>\");\n            }\n            throw new Error(\"Unable to determine file type for external resource: \".concat(resource));\n        })\n            .join(\"\\n\");\n        return this.injectContentIntoHead(content, tagsToInsert);\n    };\n    SandpackStatic.prototype.injectScriptIntoHead = function (content, opts) {\n        var script = opts.script, _a = opts.scope, scope = _a === void 0 ? {} : _a;\n        var scriptToInsert = \"\\n    <script>\\n      const scope = \".concat(JSON.stringify(scope), \";\\n      \").concat(script, \"\\n    </script>\\n    \").trim();\n        return this.injectContentIntoHead(content, scriptToInsert);\n    };\n    SandpackStatic.prototype.updateSandbox = function (setup, _isInitializationCompile) {\n        if (setup === void 0) { setup = this.sandboxSetup; }\n        var modules = fromBundlerFilesToFS(setup.files);\n        /**\n         * Pass init files to the bundler\n         */\n        this.dispatch({\n            codesandbox: true,\n            modules: modules,\n            template: setup.template,\n            type: \"compile\",\n        });\n    };\n    SandpackStatic.prototype.compile = function (files) {\n        return __awaiter(this, void 0, void 0, function () {\n            var previewUrl;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.files = new Map(Object.entries(files));\n                        return [4 /*yield*/, this.previewController.initPreview()];\n                    case 1:\n                        previewUrl = _a.sent();\n                        this.iframe.setAttribute(\"src\", previewUrl);\n                        this.status = \"done\";\n                        this.dispatch({ type: \"done\", compilatonError: false });\n                        this.dispatch({\n                            type: \"urlchange\",\n                            url: previewUrl,\n                            back: false,\n                            forward: false,\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Handles message windows coming from iframes\n    SandpackStatic.prototype.eventListener = function (evt) {\n        // skip events originating from different iframes\n        if (evt.source !== this.iframe.contentWindow) {\n            return;\n        }\n        var message = evt.data;\n        if (!message.codesandbox) {\n            return;\n        }\n        this.dispatch(message);\n    };\n    /**\n     * Bundler communication\n     */\n    SandpackStatic.prototype.dispatch = function (message) {\n        var _a;\n        switch (message.type) {\n            case \"compile\":\n                this.compile(message.modules);\n                break;\n            default:\n                (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, \"*\");\n                this.emitter.dispatch(message);\n        }\n    };\n    SandpackStatic.prototype.listen = function (listener) {\n        return this.emitter.listener(listener);\n    };\n    SandpackStatic.prototype.destroy = function () {\n        this.emitter.cleanup();\n        if (typeof window !== \"undefined\") {\n            window.removeEventListener(\"message\", this.eventListener);\n        }\n    };\n    return SandpackStatic;\n}(SandpackClient));\n\nexport { SandpackStatic };\n"],"names":["readBuffer","content","TextDecoder","decode","SandpackStatic","_super","selector","sandboxSetup","options","_a","_this","call","this","files","Map","status","emitter","E","previewController","PreviewController","baseUrl","bundlerURL","getFileContent","filepath","get","Error","endsWith","contentString","doc","DOMParser","parseFromString","documentElement","getAttribute","setAttribute","html","outerHTML","concat","validateHtml","injectProtocolScript","injectExternalResources","externalResources","injectScriptIntoHead","script","c","scope","channelId","g","err","console","error","element","document","querySelector","iframe","createElement","eventListener","bind","window","addEventListener","updateSandbox","prototype","injectContentIntoHead","contentToInsert","regex","insertable","match","exec","length","offset","index","substring","insertHtmlAfterRegex","tagsToInsert","map","resource","fileType","includes","join","opts","scriptToInsert","JSON","stringify","trim","setup","_isInitializationCompile","modules","f","dispatch","codesandbox","template","type","compile","_","previewUrl","label","Object","entries","initPreview","sent","compilatonError","url","back","forward","evt","source","contentWindow","message","data","postMessage","listen","listener","destroy","cleanup","removeEventListener","S"],"sourceRoot":""}